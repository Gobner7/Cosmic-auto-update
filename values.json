local Api = {};
local sub = string.sub;
local find = string.find;
local split = string.split;
local remove = table.remove;
local gsub = string.gsub;
local insert = table.insert;
local match = string.match;
local tonumber = tonumber;
local pcall = pcall;
local error = error;
local tostring = tostring;
local assert = assert;

local httpget; do
    local game = game;
    local oldhttpget = game.HttpGet;
    httpget = function(url)
        local suc, res = pcall(oldhttpget, game, url);
        if not suc then
            return error("Failed to send get request: " .. tostring(res));
        end;
        return res;
    end;
end;

local GameId = game.GameId;
if GameId == 66654135 then
    Api.Game = "MurderMystery2";
    local Pattern = "<font size=%+1><b><span class=(%b><)/span><BR>[%s]+VALUE: ([%d,]+) </b>[%s]+</font>";
    local Pattern2 = "<font size=%+1><b><span class=[^>]+(%b><)/span><BR>[%s]+VALUE: ([%d,]+) </b>[%s]+</font>";
    local BASEURL = "https://www.mm2values.com/v3/?p=";
    local urls = {ancient = true, unique = true, godly = true, vintage = true, legend = true, rare = true, uncommon = true, common = true, pets = true, misc = true};
    for k in next, urls do
        urls[k] = BASEURL .. k;
    end;
    function Api.refresh(self)
        assert(self == Api, "Use colon notation. Try self:refresh()");
        local Values = {};
        for Name, Url in next, urls do
            local Body = httpget(Url);
            local function add(Name, Value)
                Name = Name:sub(2, -2);
                Value = tonumber((Value:gsub("%D","")));
                Values[Name:upper()] = Value;
            end;
            Body:gsub(Pattern, add);
            Body:gsub(Pattern2, add);
        end;
        self.Values = Values;
        return Values;
    end;
elseif GameId == 142553158 then
    Api.Game = "Assassin";
    local URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTSEzyLExxmRJE-YgEkG82hCEzikPPU0dG-EMY3vy7pSYiCgFQofWXpXypyuRkejYlBVwwkOSdpitTI/pubhtml";
    local pattern1 = '<body class="docs%-gm">';
    local splitseperator = '<tr style="height: 20px">';
    local namepattern = 'dir="ltr">([^<]+)</td>';
    local clickme = "CLICK ME";
    local na = "N/A";
    local spaces = "(%s+)";
    local singlequote_escape = "&#39;";
    local singlequote = "'";
    local space = " ";
    local spaces2 = "%s";
    local emptystring = "";
    local letters = "%a";
    local T1Exotics = "T1 Exotic[s]?";
    local not_numbers = "%D";
    function Api.refresh(self)
        assert(self == Api, "Use colon notation. Try self:refresh()");
        local Body = httpget(URL);
        Body = sub(Body, find(Body, pattern1), -1);
        local split = split(Body, splitseperator);
        remove(split, 1);
        local Values = {};
        for _, v in next, split do
            if (find(v, clickme) or find(v, na)) and find(v, namepattern) then
                local ltrs = {};
                gsub(v, namepattern, function(a)
                    insert(ltrs, a);
                end);
                if #ltrs < 2 then
                    continue;
                end;
                local first = (gsub(ltrs[1], spaces, space));
                first = (gsub(first, singlequote_escape, singlequote));
                if match(sub(first, -1, -1), spaces2) then
                    first = sub(first, 1, -2);
                end;
                local second = gsub(ltrs[2], spaces2, emptystring);
                local third = ltrs[3];
                                if match(third, letters) and not match(third, T1Exotics) then
                    continue;
                end;
                third = (gsub(third, space .. T1Exotics, emptystring));
                third = (gsub(third, not_numbers, emptystring));
                Values[first] = tonumber(third);
            end;
        end;
        self.Values = Values;
        return Values;
    end;
elseif GameId == 3317771874 then
    Api.Game = "PetSimulator99";
    local URL = "https://petsimulatorvalues.com/ps99.php?category=Huges";
    local Pattern = '<h5 class="item-name">(.-)</h5>.*<span class="float-right pt-2">(.-)</span>';
    function handleValue(valueStr)
        if valueStr == "O/C" or valueStr == "SOON" then
            return 0
        elseif valueStr:find("M") then
            return tonumber(valueStr:gsub("M", "")) * 1000000
        elseif valueStr:find("B") then
            return tonumber(valueStr:gsub("B", "")) * 1000000000
        elseif valueStr:find("T") then
            return tonumber(valueStr:gsub("T", "")) * 1000000000000
        else
            return tonumber(valueStr)
        end
    end
    function Api.refresh(self)
        assert(self == Api, "Use colon notation. Try self:refresh()");
        local Body = httpget(URL);
        local Values = {};
        for Name, ValueStr in Body:gmatch(Pattern) do
            local Value = handleValue(ValueStr)
            Values[Name:lower()] = Value
        end;
        self.Values = Values;
        return Values;
    end;
else
    return error("[UniversalValueApi] Unsupported game. Current GameId: " .. tostring(GameId));
end;

local type = type;
local format = string.format;
local clamp = math.clamp;
local abs = math.abs;
local upper = string.upper;
local warn = warn;
function Api.calculate(self, items)
    assert(self == Api, "Use colon notation. Try self:calculate(items)");
    assert(type(items) == "table", "Expected 'table' for items, got " .. type(items));
    local Value = 0;
    for Item, Amount in next, items do
        if type(Item) ~= "string" then
            return error("Unexpected key in items. Expected 'string', got " .. format("%q", Item));
        end;
        if type(Amount) ~= "number" then
            return error("Unexpected value in items. Expected 'number', got " .. format("%q", Amount));
        end;
        Amount = clamp(Amount, 0, abs(Amount));
        Item = upper(Item);
        local value = self.Values[Item];
        if value then
            Value += (value * Amount);
        else
            warn("Item '" .. Item .. "' was not found in values.");
        end;
    end;
    return Value;
end;
function Api.format(self, number)
    assert(self == Api, "Use colon notation. Try self:format(number)");
    assert(type(number) == "number", "Expected 'number' for number, got " .. type(number));
    number = tostring(number);
    if #number < 4 then return number; end;
    local formatted = (number:reverse():gsub("%d%d%d", "%0,")):reverse();
    if formatted:sub(1,1) == "," then
        formatted = formatted:sub(2, -1);
    end;
    return formatted;
end;

Api:refresh();
shared.UniversalValueApi = Api;
return Api;
