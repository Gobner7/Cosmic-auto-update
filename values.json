local Api = {};
local sub = string.sub;
local find = string.find;
local split = string.split;
local remove = table.remove;
local gsub = string.gsub;
local insert = table.insert;
local match = string.match;
local tonumber = tonumber;
local pcall = pcall;
local error = error;
local tostring = tostring;
local assert = assert;

local httpget; do
    local game = game;
    local oldhttpget = game.HttpGet;
    httpget = function(url)
        local suc, res = pcall(oldhttpget, game, url);
        if not suc then
            return error("Failed to send get request: " .. tostring(res));
        end;
        return res;
    end;
end;

local type = type;
local format = string.format;
local clamp = math.clamp;
local abs = math.abs;
local upper = string.upper;
local warn = warn;
function Api.calculate(self, items)
    assert(self == Api, "Use colon notation. Try self:calculate(items)");
    assert(type(items) == "table", "Expected 'table' for items, got " .. type(items));
    local Value = 0;
    for Item, Amount in next, items do
        if type(Item) ~= "string" then
            return error("Unexpected key in items. Expected 'string', got " .. format("%q", Item));
        end;
        if type(Amount) ~= "number" then
            return error("Unexpected value in items. Expected 'number', got " .. format("%q", Amount));
        end;
        Amount = clamp(Amount, 0, abs(Amount));
        Item = upper(Item);
        local value = self.Values[Item];
        if value then
            Value += (value * Amount);
        else
            warn("Item '" .. Item .. "' was not found in values.");
        end;
    end;
    return Value;
end;
function Api.format(self, number)
    assert(self == Api, "Use colon notation. Try self:format(number)");
    assert(type(number) == "number", "Expected 'number' for number, got " .. type(number));
    number = tostring(number);
    if #number < 4 then return number; end;
    local formatted = (number:reverse():gsub("%d%d%d", "%0,")):reverse();
    if formatted:sub(1,1) == "," then
        formatted = formatted:sub(2, -1);
    end;
    return formatted;
end;

Api:refresh();
shared.UniversalValueApi = Api;
return Api;
